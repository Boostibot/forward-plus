#version 430 core
#extension GL_ARB_shader_storage_buffer_object : require
#extension ARB_shader_image_load_store : require


#ifndef CUSTOM_DEFINES
#define BLOCK_SIZE_X 16
#define BLOCK_SIZE_Y 16
#define BLOCK_SIZE_Z 1
#endif

#ifndef SINGLE_THREAD_REDUCTION
    #define SINGLE_THREAD_REDUCTION 2
#endif

layout (local_size_x = BLOCK_SIZE_X, local_size_y = BLOCK_SIZE_Y, local_size_z = BLOCK_SIZE_Z) in;
layout(r32f,   binding = 0) uniform image2D u_input;
layout(rg32f,  binding = 1) uniform image2D u_output;

shared float shared_min[BLOCK_SIZE_X*BLOCK_SIZE_Y];
shared float shared_max[BLOCK_SIZE_X*BLOCK_SIZE_Y];

const float pos_infinity = uintBitsToFloat(0x7F800000);
const float neg_infinity = uintBitsToFloat(0xFF800000);

void main() 
{
    uvec2 size = imageSize(u_input);
    
    //Load values to shared memory. If thread outside the image size load the identity value for said operation
    float local_min = pos_infinity;
    float local_max = neg_infinity;
    if(gl_GlobalInvocationID.x < size.x && gl_GlobalInvocationID.y < size.y)
    {
        float depth = imageLoad(u_input, ivec2(gl_GlobalInvocationID.xy)).r;
        local_min = depth;
        local_max = depth;
    }

    //Store local min max
    shared_min[gl_LocalInvocationIndex] = local_min;
    shared_max[gl_LocalInvocationIndex] = local_max;
    barrier();

    //Folding loop (now we treat the 2D region as 1D)
    for(uint i = BLOCK_SIZE_X*BLOCK_SIZE_Y/2; i >= SINGLE_THREAD_REDUCTION; i /= 2)
    {
        if(gl_LocalInvocationIndex < i)
        {
            shared_min[gl_LocalInvocationIndex] = min(shared_min[gl_LocalInvocationIndex], shared_min[gl_LocalInvocationIndex + i]);
            shared_max[gl_LocalInvocationIndex] = max(shared_max[gl_LocalInvocationIndex], shared_max[gl_LocalInvocationIndex + i]);
        }
        barrier();
    }
    
    //The block representantive does the last few reduction steps (which skips synchronization overhead in the above fold loop)
    // then stores the output into smaller output texture
    if(gl_LocalInvocationIndex == 0)
    {
        float final_min = shared_min[gl_LocalInvocationIndex];
        float final_max = shared_max[gl_LocalInvocationIndex];
        for(uint i = 1; i < SINGLE_THREAD_REDUCTION; i++)
        {
            final_min = min(final_min, shared_min[gl_LocalInvocationIndex + i]);
            final_max = max(final_max, shared_max[gl_LocalInvocationIndex + i]);
        }

        ivec2 output_pos = ivec2(gl_GlobalInvocationID.x/BLOCK_SIZE_X, gl_GlobalInvocationID.y/BLOCK_SIZE_Y);
        imageStore(u_output, output_pos, vec4(final_min, final_max, 0, 0));
    }
}