#version 430 core
#extension GL_ARB_shader_storage_buffer_object : require
#extension ARB_shader_image_load_store : require


#ifndef CUSTOM_DEFINES
#define BLOCK_SIZE_X 16
#define BLOCK_SIZE_Y 16
#define BLOCK_SIZE_Z 1
#endif

layout (local_size_x = BLOCK_SIZE_X, local_size_y = BLOCK_SIZE_Y, local_size_z = BLOCK_SIZE_Z) in;
layout(r32f,   binding = 0) uniform image2D u_input;
layout(rg32f,  binding = 1) uniform image2D u_output;

shared uint shared_min_1;
shared uint shared_max_1;

void main() 
{
    if(gl_GlobalInvocationID.x >= imageSize(u_input).x || gl_GlobalInvocationID.y >= imageSize(u_input).y)
        return;

    float depth = imageLoad(u_input, ivec2(gl_GlobalInvocationID.xy)).r;
    uint udepth = floatBitsToUint(depth);
    
    if(gl_LocalInvocationIndex == 0)
    {
        shared_min_1 = udepth;
        shared_max_1 = udepth;
    }

    barrier();
    
    atomicMin(shared_min_1, udepth);
    atomicMax(shared_max_1, udepth);
    
    barrier();
    
    if(gl_LocalInvocationIndex == 0)
    {
        ivec2 output_pos = ivec2(gl_GlobalInvocationID.x/BLOCK_SIZE_X, gl_GlobalInvocationID.y/BLOCK_SIZE_Y);
        imageStore(u_output, output_pos, vec4(uintBitsToFloat(shared_min_1), uintBitsToFloat(shared_max_1), 0, 0));
    }
}